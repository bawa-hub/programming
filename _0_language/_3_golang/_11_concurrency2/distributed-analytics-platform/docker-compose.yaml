services:
  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: analytics-postgres
    environment:
      POSTGRES_DB: analytics
      POSTGRES_USER: analytics
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Analytics Server
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: analytics-server
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - CONFIG_FILE=/app/configs/server.yaml
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    volumes:
      - ./configs:/app/configs
      - ./web:/app/web
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Analytics Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - CONFIG_FILE=/app/configs/worker.yaml
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    volumes:
      - ./configs:/app/configs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    scale: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: analytics-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - server

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: analytics-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # Nginx for load balancing
  nginx:
    image: nginx:alpine
    container_name: analytics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - server
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: analytics-network
